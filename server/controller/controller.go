package controller

import (
	"context"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	firebase "firebase.google.com/go"
	"firebase.google.com/go/auth"
	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/memstore"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"github.com/patarapolw/zhquiz/server/db"
	"github.com/patarapolw/zhquiz/server/rand"
	"github.com/patarapolw/zhquiz/shared"
	"gorm.io/gorm"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	// docs is generated by Swag CLI, you have to import it.
	_ "github.com/patarapolw/zhquiz/docs"
)

// RegisterAPI Register the API
/*
@title ZhQuiz API
@version 0.1
@description Chinese quizzing app's API
@termsOfService http://swagger.io/terms/

@contact.name Pacharapol Withayasakpunt
@contact.url https://www.polv.cc
@contact.email polv@polv.cc

@license.name MIT
@license.url https://mit-license.org/
*/
func RegisterAPI(r *gin.Engine) (*db.DB, *memstore.Store) {
	var firebaseAuth *auth.Client

	if os.Getenv("GOOGLE_APPLICATION_CREDENTIALS") != "" {
		ctx := context.Background()

		app, err := firebase.NewApp(context.Background(), nil)
		if err != nil {
			log.Fatalf("error initializing app: %v\n", err)
		}

		// firebaseApp = app

		client, err := app.Auth(ctx)
		if err != nil {
			log.Fatalf("error getting Auth client: %v\n", err)
		}

		firebaseAuth = client
	}

	apiSecret := os.Getenv("ZHQUIZ_API_SECRET")
	if apiSecret == "" {
		s, err := rand.GenerateRandomString(64)
		if err != nil {
			log.Fatalln(err)
		}
		apiSecret = s

		godotenv.Write(map[string]string{
			"ZHQUIZ_API_SECRET": apiSecret,
		}, filepath.Join(shared.Root(), ".env"))
	}

	currentDB := db.DB{
		Current: db.Connect(),
	}
	store := memstore.NewStore([]byte(apiSecret))

	r.Use(sessions.Sessions("session", store))

	r.Use(func(c *gin.Context) {
		session := sessions.Default(c)

		if strings.HasPrefix(c.Request.URL.Path, "/api/") {
			authorization := c.GetHeader("Authorization")
			if firebaseAuth != nil && strings.HasPrefix(authorization, "Bearer ") {
				ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(30*time.Second))
				defer cancel()

				idToken := strings.Split(authorization, " ")[1]
				if token, err := firebaseAuth.VerifyIDToken(ctx, idToken); err == nil {
					if u, err := firebaseAuth.GetUser(ctx, token.UID); err == nil {
						var dbUser db.User

						if r := currentDB.Current.Where("email = ?", u.Email).First(&dbUser); errors.Is(r.Error, gorm.ErrRecordNotFound) {
							dbUser.New(u.Email, u.DisplayName, u.PhotoURL)
							if dbUser.Image == "" {
								dbUser.Image = "https://www.gravatar.com/avatar/0?d=mp"
							}

							if r := currentDB.Current.Create(&dbUser); r.Error != nil {
								panic(r.Error)
							}
						}

						session.Set("userId", dbUser.ID)
					}
				}
			}
		}
	})

	r.GET("/swagger/*any", ginSwagger.WrapHandler(
		swaggerFiles.Handler,
		ginSwagger.URL(fmt.Sprintf("http://localhost:%s/swagger/doc.json", shared.Port())),
	))

	return &currentDB, &store
}
